{"ast":null,"code":"/*! @azure/msal-browser v2.36.0 2023-04-18 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { OIDC_DEFAULT_SCOPES, StringUtils, UrlString, Constants, AuthError, ThrottlingUtils, ProtocolUtils, PerformanceEvents } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserConstants, InteractionType, ApiId } from '../utils/BrowserConstants.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\nimport { NativeInteractionClient } from './NativeInteractionClient.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { InteractionHandler } from '../interaction_handler/InteractionHandler.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar PopupClient =\n/** @class */\nfunction (_super) {\n  __extends(PopupClient, _super);\n\n  function PopupClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this; // Properly sets this reference for the unload event.\n\n\n    _this.unloadWindow = _this.unloadWindow.bind(_this);\n    _this.nativeStorage = nativeStorageImpl;\n    return _this;\n  }\n  /**\r\n   * Acquires tokens by opening a popup window to the /authorize endpoint of the authority\r\n   * @param request\r\n   */\n\n\n  PopupClient.prototype.acquireToken = function (request) {\n    try {\n      var popupName = this.generatePopupName(request.scopes || OIDC_DEFAULT_SCOPES, request.authority || this.config.auth.authority);\n      var popupWindowAttributes = request.popupWindowAttributes || {}; // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n\n      if (this.config.system.asyncPopups) {\n        this.logger.verbose(\"asyncPopups set to true, acquiring token\"); // Passes on popup position and dimensions if in request\n\n        return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes);\n      } else {\n        // asyncPopups flag is set to false. Opens popup before acquiring token.\n        this.logger.verbose(\"asyncPopup set to false, opening popup before acquiring token\");\n        var popup = this.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes);\n        return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes, popup);\n      }\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  /**\r\n   * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\r\n   * @param logoutRequest\r\n   */\n\n\n  PopupClient.prototype.logout = function (logoutRequest) {\n    try {\n      this.logger.verbose(\"logoutPopup called\");\n      var validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n      var popupName = this.generateLogoutPopupName(validLogoutRequest);\n      var authority = logoutRequest && logoutRequest.authority;\n      var mainWindowRedirectUri = logoutRequest && logoutRequest.mainWindowRedirectUri;\n      var popupWindowAttributes = (logoutRequest === null || logoutRequest === void 0 ? void 0 : logoutRequest.popupWindowAttributes) || {}; // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n\n      if (this.config.system.asyncPopups) {\n        this.logger.verbose(\"asyncPopups set to true\"); // Passes on popup position and dimensions if in request\n\n        return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, undefined, mainWindowRedirectUri);\n      } else {\n        // asyncPopups flag is set to false. Opens popup before logging out.\n        this.logger.verbose(\"asyncPopup set to false, opening popup\");\n        var popup = this.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes);\n        return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, popup, mainWindowRedirectUri);\n      }\n    } catch (e) {\n      // Since this function is synchronous we need to reject\n      return Promise.reject(e);\n    }\n  };\n  /**\r\n   * Helper which obtains an access_token for your API via opening a popup window in the user's browser\r\n   * @param validRequest\r\n   * @param popupName\r\n   * @param popup\r\n   * @param popupWindowAttributes\r\n   *\r\n   * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n   */\n\n\n  PopupClient.prototype.acquireTokenPopupAsync = function (request, popupName, popupWindowAttributes, popup) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTelemetryManager, validRequest, authCodeRequest, authClient, isNativeBroker, fetchNativeAccountIdMeasurement, navigateUrl, interactionHandler, popupParameters, popupWindow, hash, serverParams, state_1, nativeInteractionClient, userRequestState, result, e_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"acquireTokenPopupAsync called\");\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenPopup);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationRequest(request, InteractionType.Popup)];\n\n          case 1:\n            validRequest = _a.sent();\n            this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 8,, 9]); // Create auth code request and generate PKCE params\n\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\n            return [4\n            /*yield*/\n            , this.initializeAuthorizationCodeRequest(validRequest)];\n\n          case 3:\n            authCodeRequest = _a.sent(); // Initialize the client\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions)];\n\n          case 4:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            isNativeBroker = NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme);\n            fetchNativeAccountIdMeasurement = void 0;\n\n            if (isNativeBroker) {\n              fetchNativeAccountIdMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.FetchAccountIdWithNativeBroker, request.correlationId);\n            }\n\n            return [4\n            /*yield*/\n            , authClient.getAuthCodeUrl(__assign(__assign({}, validRequest), {\n              nativeBroker: isNativeBroker\n            }))];\n\n          case 5:\n            navigateUrl = _a.sent();\n            interactionHandler = new InteractionHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);\n            popupParameters = {\n              popup: popup,\n              popupName: popupName,\n              popupWindowAttributes: popupWindowAttributes\n            };\n            popupWindow = this.initiateAuthRequest(navigateUrl, popupParameters);\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {\n              popupWindow: popupWindow\n            }, null);\n            return [4\n            /*yield*/\n            , this.monitorPopupForHash(popupWindow)];\n\n          case 6:\n            hash = _a.sent();\n            serverParams = UrlString.getDeserializedHash(hash);\n            state_1 = this.validateAndExtractStateFromHash(serverParams, InteractionType.Popup, validRequest.correlationId); // Remove throttle if it exists\n\n            ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, authCodeRequest);\n\n            if (serverParams.accountId) {\n              this.logger.verbose(\"Account id found in hash, calling WAM for token\"); // end measurement for server call with native brokering enabled\n\n              if (fetchNativeAccountIdMeasurement) {\n                fetchNativeAccountIdMeasurement.endMeasurement({\n                  success: true,\n                  isNativeBroker: true\n                });\n              }\n\n              if (!this.nativeMessageHandler) {\n                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\n              }\n\n              nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, validRequest.correlationId);\n              userRequestState = ProtocolUtils.parseRequestState(this.browserCrypto, state_1).userRequestState;\n              return [2\n              /*return*/\n              , nativeInteractionClient.acquireToken(__assign(__assign({}, validRequest), {\n                state: userRequestState,\n                prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\n\n              })).finally(function () {\n                _this.browserStorage.cleanRequestByState(state_1);\n              })];\n            }\n\n            return [4\n            /*yield*/\n            , interactionHandler.handleCodeResponseFromHash(hash, state_1, authClient.authority, this.networkClient)];\n\n          case 7:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n\n          case 8:\n            e_1 = _a.sent();\n\n            if (popup) {\n              // Close the synchronous popup if an error is thrown before the window unload event is registered\n              popup.close();\n            }\n\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e_1;\n\n          case 9:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   *\r\n   * @param validRequest\r\n   * @param popupName\r\n   * @param requestAuthority\r\n   * @param popup\r\n   * @param mainWindowRedirectUri\r\n   * @param popupWindowAttributes\r\n   */\n\n\n  PopupClient.prototype.logoutPopupAsync = function (validRequest, popupName, popupWindowAttributes, requestAuthority, popup, mainWindowRedirectUri) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTelemetryManager, authClient, logoutUri, popupWindow, navigationOptions, absoluteUrl, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"logoutPopupAsync called\");\n            this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Popup, validRequest);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logoutPopup);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 5,, 6]); // Clear cache on logout\n\n\n            return [4\n            /*yield*/\n            , this.clearCacheOnLogout(validRequest.account)];\n\n          case 2:\n            // Clear cache on logout\n            _a.sent(); // Initialize the client\n\n\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, validRequest.correlationId);\n            return [4\n            /*yield*/\n            , this.createAuthCodeClient(serverTelemetryManager, requestAuthority)];\n\n          case 3:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            logoutUri = authClient.getLogoutUri(validRequest);\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Popup, validRequest);\n            popupWindow = this.openPopup(logoutUri, {\n              popupName: popupName,\n              popupWindowAttributes: popupWindowAttributes,\n              popup: popup\n            });\n            this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, {\n              popupWindow: popupWindow\n            }, null);\n            return [4\n            /*yield*/\n            , this.waitForLogoutPopup(popupWindow)];\n\n          case 4:\n            _a.sent();\n\n            if (mainWindowRedirectUri) {\n              navigationOptions = {\n                apiId: ApiId.logoutPopup,\n                timeout: this.config.system.redirectNavigationTimeout,\n                noHistory: false\n              };\n              absoluteUrl = UrlString.getAbsoluteUrl(mainWindowRedirectUri, BrowserUtils.getCurrentUri());\n              this.logger.verbose(\"Redirecting main window to url specified in the request\");\n              this.logger.verbosePii(\"Redirecting main window to: \" + absoluteUrl);\n              this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);\n            } else {\n              this.logger.verbose(\"No main window navigation requested\");\n            }\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            e_2 = _a.sent();\n\n            if (popup) {\n              // Close the synchronous popup if an error is thrown before the window unload event is registered\n              popup.close();\n            }\n\n            if (e_2 instanceof AuthError) {\n              e_2.setCorrelationId(this.correlationId);\n            }\n\n            this.browserStorage.setInteractionInProgress(false);\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Popup, null, e_2);\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\n            serverTelemetryManager.cacheFailedRequest(e_2);\n            throw e_2;\n\n          case 6:\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Opens a popup window with given request Url.\r\n   * @param requestUrl\r\n   */\n\n\n  PopupClient.prototype.initiateAuthRequest = function (requestUrl, params) {\n    // Check that request url is not empty.\n    if (!StringUtils.isEmpty(requestUrl)) {\n      this.logger.infoPii(\"Navigate to: \" + requestUrl); // Open the popup window to requestUrl.\n\n      return this.openPopup(requestUrl, params);\n    } else {\n      // Throw error if request URL is empty.\n      this.logger.error(\"Navigate url is empty\");\n      throw BrowserAuthError.createEmptyNavigationUriError();\n    }\n  };\n  /**\r\n   * Monitors a window until it loads a url with the same origin.\r\n   * @param popupWindow - window that is being monitored\r\n   * @param timeout - timeout for processing hash once popup is redirected back to application\r\n   */\n\n\n  PopupClient.prototype.monitorPopupForHash = function (popupWindow) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      /*\r\n       * Polling for popups needs to be tick-based,\r\n       * since a non-trivial amount of time can be spent on interaction (which should not count against the timeout).\r\n       */\n      var maxTicks = _this.config.system.windowHashTimeout / _this.config.system.pollIntervalMilliseconds;\n      var ticks = 0;\n\n      _this.logger.verbose(\"PopupHandler.monitorPopupForHash - polling started\");\n\n      var intervalId = setInterval(function () {\n        // Window is closed\n        if (popupWindow.closed) {\n          _this.logger.error(\"PopupHandler.monitorPopupForHash - window closed\");\n\n          _this.cleanPopup();\n\n          clearInterval(intervalId);\n          reject(BrowserAuthError.createUserCancelledError());\n          return;\n        }\n\n        var href = Constants.EMPTY_STRING;\n        var hash = Constants.EMPTY_STRING;\n\n        try {\n          /*\r\n           * Will throw if cross origin,\r\n           * which should be caught and ignored\r\n           * since we need the interval to keep running while on STS UI.\r\n           */\n          href = popupWindow.location.href;\n          hash = popupWindow.location.hash;\n        } catch (e) {} // Don't process blank pages or cross domain\n\n\n        if (StringUtils.isEmpty(href) || href === \"about:blank\") {\n          return;\n        }\n\n        _this.logger.verbose(\"PopupHandler.monitorPopupForHash - popup window is on same origin as caller\");\n        /*\r\n         * Only run clock when we are on same domain for popups\r\n         * as popup operations can take a long time.\r\n         */\n\n\n        ticks++;\n\n        if (hash) {\n          _this.logger.verbose(\"PopupHandler.monitorPopupForHash - found hash in url\");\n\n          clearInterval(intervalId);\n\n          _this.cleanPopup(popupWindow);\n\n          if (UrlString.hashContainsKnownProperties(hash)) {\n            _this.logger.verbose(\"PopupHandler.monitorPopupForHash - hash contains known properties, returning.\");\n\n            resolve(hash);\n          } else {\n            _this.logger.error(\"PopupHandler.monitorPopupForHash - found hash in url but it does not contain known properties. Check that your router is not changing the hash prematurely.\");\n\n            _this.logger.errorPii(\"PopupHandler.monitorPopupForHash - hash found: \" + hash);\n\n            reject(BrowserAuthError.createHashDoesNotContainKnownPropertiesError());\n          }\n        } else if (ticks > maxTicks) {\n          _this.logger.error(\"PopupHandler.monitorPopupForHash - unable to find hash in url, timing out\");\n\n          clearInterval(intervalId);\n          reject(BrowserAuthError.createMonitorPopupTimeoutError());\n        }\n      }, _this.config.system.pollIntervalMilliseconds);\n    });\n  };\n  /**\r\n   * Waits for user interaction in logout popup window\r\n   * @param popupWindow\r\n   * @returns\r\n   */\n\n\n  PopupClient.prototype.waitForLogoutPopup = function (popupWindow) {\n    var _this = this;\n\n    return new Promise(function (resolve) {\n      _this.logger.verbose(\"PopupHandler.waitForLogoutPopup - polling started\");\n\n      var intervalId = setInterval(function () {\n        // Window is closed\n        if (popupWindow.closed) {\n          _this.logger.error(\"PopupHandler.waitForLogoutPopup - window closed\");\n\n          _this.cleanPopup();\n\n          clearInterval(intervalId);\n          resolve();\n        }\n\n        var href = Constants.EMPTY_STRING;\n\n        try {\n          /*\r\n           * Will throw if cross origin,\r\n           * which should be caught and ignored\r\n           * since we need the interval to keep running while on STS UI.\r\n           */\n          href = popupWindow.location.href;\n        } catch (e) {} // Don't process blank pages or cross domain\n\n\n        if (StringUtils.isEmpty(href) || href === \"about:blank\") {\n          return;\n        }\n\n        _this.logger.verbose(\"PopupHandler.waitForLogoutPopup - popup window is on same origin as caller, closing.\");\n\n        clearInterval(intervalId);\n\n        _this.cleanPopup(popupWindow);\n\n        resolve();\n      }, _this.config.system.pollIntervalMilliseconds);\n    });\n  };\n  /**\r\n   * @hidden\r\n   *\r\n   * Configures popup window for login.\r\n   *\r\n   * @param urlNavigate\r\n   * @param title\r\n   * @param popUpWidth\r\n   * @param popUpHeight\r\n   * @param popupWindowAttributes\r\n   * @ignore\r\n   * @hidden\r\n   */\n\n\n  PopupClient.prototype.openPopup = function (urlNavigate, popupParams) {\n    try {\n      var popupWindow = void 0; // Popup window passed in, setting url to navigate to\n\n      if (popupParams.popup) {\n        popupWindow = popupParams.popup;\n        this.logger.verbosePii(\"Navigating popup window to: \" + urlNavigate);\n        popupWindow.location.assign(urlNavigate);\n      } else if (typeof popupParams.popup === \"undefined\") {\n        // Popup will be undefined if it was not passed in\n        this.logger.verbosePii(\"Opening popup window to: \" + urlNavigate);\n        popupWindow = this.openSizedPopup(urlNavigate, popupParams.popupName, popupParams.popupWindowAttributes);\n      } // Popup will be null if popups are blocked\n\n\n      if (!popupWindow) {\n        throw BrowserAuthError.createEmptyWindowCreatedError();\n      }\n\n      if (popupWindow.focus) {\n        popupWindow.focus();\n      }\n\n      this.currentWindow = popupWindow;\n      window.addEventListener(\"beforeunload\", this.unloadWindow);\n      return popupWindow;\n    } catch (e) {\n      this.logger.error(\"error opening popup \" + e.message);\n      this.browserStorage.setInteractionInProgress(false);\n      throw BrowserAuthError.createPopupWindowError(e.toString());\n    }\n  };\n  /**\r\n   * Helper function to set popup window dimensions and position\r\n   * @param urlNavigate\r\n   * @param popupName\r\n   * @param popupWindowAttributes\r\n   * @returns\r\n   */\n\n\n  PopupClient.prototype.openSizedPopup = function (urlNavigate, popupName, popupWindowAttributes) {\n    var _a, _b, _c, _d;\n    /**\r\n     * adding winLeft and winTop to account for dual monitor\r\n     * using screenLeft and screenTop for IE8 and earlier\r\n     */\n\n\n    var winLeft = window.screenLeft ? window.screenLeft : window.screenX;\n    var winTop = window.screenTop ? window.screenTop : window.screenY;\n    /**\r\n     * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n     * using document.documentElement.clientWidth for IE8 and earlier\r\n     */\n\n    var winWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n    var winHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n    var width = (_a = popupWindowAttributes.popupSize) === null || _a === void 0 ? void 0 : _a.width;\n    var height = (_b = popupWindowAttributes.popupSize) === null || _b === void 0 ? void 0 : _b.height;\n    var top = (_c = popupWindowAttributes.popupPosition) === null || _c === void 0 ? void 0 : _c.top;\n    var left = (_d = popupWindowAttributes.popupPosition) === null || _d === void 0 ? void 0 : _d.left;\n\n    if (!width || width < 0 || width > winWidth) {\n      this.logger.verbose(\"Default popup window width used. Window width not configured or invalid.\");\n      width = BrowserConstants.POPUP_WIDTH;\n    }\n\n    if (!height || height < 0 || height > winHeight) {\n      this.logger.verbose(\"Default popup window height used. Window height not configured or invalid.\");\n      height = BrowserConstants.POPUP_HEIGHT;\n    }\n\n    if (!top || top < 0 || top > winHeight) {\n      this.logger.verbose(\"Default popup window top position used. Window top not configured or invalid.\");\n      top = Math.max(0, winHeight / 2 - BrowserConstants.POPUP_HEIGHT / 2 + winTop);\n    }\n\n    if (!left || left < 0 || left > winWidth) {\n      this.logger.verbose(\"Default popup window left position used. Window left not configured or invalid.\");\n      left = Math.max(0, winWidth / 2 - BrowserConstants.POPUP_WIDTH / 2 + winLeft);\n    }\n\n    return window.open(urlNavigate, popupName, \"width=\" + width + \", height=\" + height + \", top=\" + top + \", left=\" + left + \", scrollbars=yes\");\n  };\n  /**\r\n   * Event callback to unload main window.\r\n   */\n\n\n  PopupClient.prototype.unloadWindow = function (e) {\n    this.browserStorage.cleanRequestByInteractionType(InteractionType.Popup);\n\n    if (this.currentWindow) {\n      this.currentWindow.close();\n    } // Guarantees browser unload will happen, so no other errors will be thrown.\n\n\n    e.preventDefault();\n  };\n  /**\r\n   * Closes popup, removes any state vars created during popup calls.\r\n   * @param popupWindow\r\n   */\n\n\n  PopupClient.prototype.cleanPopup = function (popupWindow) {\n    if (popupWindow) {\n      // Close window.\n      popupWindow.close();\n    } // Remove window unload function\n\n\n    window.removeEventListener(\"beforeunload\", this.unloadWindow); // Interaction is completed - remove interaction status.\n\n    this.browserStorage.setInteractionInProgress(false);\n  };\n  /**\r\n   * Generates the name for the popup based on the client id and request\r\n   * @param clientId\r\n   * @param request\r\n   */\n\n\n  PopupClient.prototype.generatePopupName = function (scopes, authority) {\n    return BrowserConstants.POPUP_NAME_PREFIX + \".\" + this.config.auth.clientId + \".\" + scopes.join(\"-\") + \".\" + authority + \".\" + this.correlationId;\n  };\n  /**\r\n   * Generates the name for the popup based on the client id and request for logouts\r\n   * @param clientId\r\n   * @param request\r\n   */\n\n\n  PopupClient.prototype.generateLogoutPopupName = function (request) {\n    var homeAccountId = request.account && request.account.homeAccountId;\n    return BrowserConstants.POPUP_NAME_PREFIX + \".\" + this.config.auth.clientId + \".\" + homeAccountId + \".\" + this.correlationId;\n  };\n\n  return PopupClient;\n}(StandardInteractionClient);\n\nexport { PopupClient };","map":{"version":3,"sources":["/Users/manishkumar/Desktop/PROJECTS/Msal-Angular/node_modules/@azure/msal-browser/dist/interaction_client/PopupClient.js"],"names":["__extends","__awaiter","__generator","__assign","OIDC_DEFAULT_SCOPES","StringUtils","UrlString","Constants","AuthError","ThrottlingUtils","ProtocolUtils","PerformanceEvents","StandardInteractionClient","EventType","BrowserConstants","InteractionType","ApiId","BrowserUtils","NativeInteractionClient","NativeMessageHandler","BrowserAuthError","InteractionHandler","PopupClient","_super","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","performanceClient","nativeStorageImpl","nativeMessageHandler","correlationId","_this","call","unloadWindow","bind","nativeStorage","prototype","acquireToken","request","popupName","generatePopupName","scopes","authority","auth","popupWindowAttributes","system","asyncPopups","verbose","acquireTokenPopupAsync","popup","openSizedPopup","e","Promise","reject","logout","logoutRequest","validLogoutRequest","initializeLogoutRequest","generateLogoutPopupName","mainWindowRedirectUri","logoutPopupAsync","undefined","serverTelemetryManager","validRequest","authCodeRequest","authClient","isNativeBroker","fetchNativeAccountIdMeasurement","navigateUrl","interactionHandler","popupParameters","popupWindow","hash","serverParams","state_1","nativeInteractionClient","userRequestState","result","e_1","_a","label","initializeServerTelemetryManager","acquireTokenPopup","setPreQueueTime","StandardInteractionClientInitializeAuthorizationRequest","initializeAuthorizationRequest","Popup","sent","browserStorage","updateCacheEntries","state","nonce","loginHint","EMPTY_STRING","account","trys","push","StandardInteractionClientInitializeAuthorizationCodeRequest","initializeAuthorizationCodeRequest","StandardInteractionClientCreateAuthCodeClient","createAuthCodeClient","azureCloudOptions","isNativeAvailable","authenticationScheme","startMeasurement","FetchAccountIdWithNativeBroker","getAuthCodeUrl","nativeBroker","initiateAuthRequest","emitEvent","POPUP_OPENED","monitorPopupForHash","getDeserializedHash","validateAndExtractStateFromHash","removeThrottle","clientId","accountId","endMeasurement","success","createNativeConnectionNotEstablishedError","parseRequestState","prompt","finally","cleanRequestByState","handleCodeResponseFromHash","networkClient","close","setCorrelationId","cacheFailedRequest","requestAuthority","logoutUri","navigationOptions","absoluteUrl","e_2","LOGOUT_START","logoutPopup","clearCacheOnLogout","getLogoutUri","LOGOUT_SUCCESS","openPopup","waitForLogoutPopup","apiId","timeout","redirectNavigationTimeout","noHistory","getAbsoluteUrl","getCurrentUri","verbosePii","navigateInternal","setInteractionInProgress","LOGOUT_FAILURE","LOGOUT_END","requestUrl","params","isEmpty","infoPii","error","createEmptyNavigationUriError","resolve","maxTicks","windowHashTimeout","pollIntervalMilliseconds","ticks","intervalId","setInterval","closed","cleanPopup","clearInterval","createUserCancelledError","href","location","hashContainsKnownProperties","errorPii","createHashDoesNotContainKnownPropertiesError","createMonitorPopupTimeoutError","urlNavigate","popupParams","assign","createEmptyWindowCreatedError","focus","currentWindow","window","addEventListener","message","createPopupWindowError","toString","_b","_c","_d","winLeft","screenLeft","screenX","winTop","screenTop","screenY","winWidth","innerWidth","document","documentElement","clientWidth","body","winHeight","innerHeight","clientHeight","width","popupSize","height","top","popupPosition","left","POPUP_WIDTH","POPUP_HEIGHT","Math","max","open","cleanRequestByInteractionType","preventDefault","removeEventListener","POPUP_NAME_PREFIX","join","homeAccountId"],"mappings":"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","sourcesContent":["/*! @azure/msal-browser v2.36.0 2023-04-18 */\n'use strict';\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { OIDC_DEFAULT_SCOPES, StringUtils, UrlString, Constants, AuthError, ThrottlingUtils, ProtocolUtils, PerformanceEvents } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserConstants, InteractionType, ApiId } from '../utils/BrowserConstants.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\nimport { NativeInteractionClient } from './NativeInteractionClient.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { InteractionHandler } from '../interaction_handler/InteractionHandler.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar PopupClient = /** @class */ (function (_super) {\r\n    __extends(PopupClient, _super);\r\n    function PopupClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\r\n        var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this;\r\n        // Properly sets this reference for the unload event.\r\n        _this.unloadWindow = _this.unloadWindow.bind(_this);\r\n        _this.nativeStorage = nativeStorageImpl;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Acquires tokens by opening a popup window to the /authorize endpoint of the authority\r\n     * @param request\r\n     */\r\n    PopupClient.prototype.acquireToken = function (request) {\r\n        try {\r\n            var popupName = this.generatePopupName(request.scopes || OIDC_DEFAULT_SCOPES, request.authority || this.config.auth.authority);\r\n            var popupWindowAttributes = request.popupWindowAttributes || {};\r\n            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\r\n            if (this.config.system.asyncPopups) {\r\n                this.logger.verbose(\"asyncPopups set to true, acquiring token\");\r\n                // Passes on popup position and dimensions if in request\r\n                return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes);\r\n            }\r\n            else {\r\n                // asyncPopups flag is set to false. Opens popup before acquiring token.\r\n                this.logger.verbose(\"asyncPopup set to false, opening popup before acquiring token\");\r\n                var popup = this.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes);\r\n                return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes, popup);\r\n            }\r\n        }\r\n        catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    };\r\n    /**\r\n     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\r\n     * @param logoutRequest\r\n     */\r\n    PopupClient.prototype.logout = function (logoutRequest) {\r\n        try {\r\n            this.logger.verbose(\"logoutPopup called\");\r\n            var validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\r\n            var popupName = this.generateLogoutPopupName(validLogoutRequest);\r\n            var authority = logoutRequest && logoutRequest.authority;\r\n            var mainWindowRedirectUri = logoutRequest && logoutRequest.mainWindowRedirectUri;\r\n            var popupWindowAttributes = (logoutRequest === null || logoutRequest === void 0 ? void 0 : logoutRequest.popupWindowAttributes) || {};\r\n            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\r\n            if (this.config.system.asyncPopups) {\r\n                this.logger.verbose(\"asyncPopups set to true\");\r\n                // Passes on popup position and dimensions if in request\r\n                return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, undefined, mainWindowRedirectUri);\r\n            }\r\n            else {\r\n                // asyncPopups flag is set to false. Opens popup before logging out.\r\n                this.logger.verbose(\"asyncPopup set to false, opening popup\");\r\n                var popup = this.openSizedPopup(\"about:blank\", popupName, popupWindowAttributes);\r\n                return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, popup, mainWindowRedirectUri);\r\n            }\r\n        }\r\n        catch (e) {\r\n            // Since this function is synchronous we need to reject\r\n            return Promise.reject(e);\r\n        }\r\n    };\r\n    /**\r\n     * Helper which obtains an access_token for your API via opening a popup window in the user's browser\r\n     * @param validRequest\r\n     * @param popupName\r\n     * @param popup\r\n     * @param popupWindowAttributes\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */\r\n    PopupClient.prototype.acquireTokenPopupAsync = function (request, popupName, popupWindowAttributes, popup) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var serverTelemetryManager, validRequest, authCodeRequest, authClient, isNativeBroker, fetchNativeAccountIdMeasurement, navigateUrl, interactionHandler, popupParameters, popupWindow, hash, serverParams, state_1, nativeInteractionClient, userRequestState, result, e_1;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.logger.verbose(\"acquireTokenPopupAsync called\");\r\n                        serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenPopup);\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\r\n                        return [4 /*yield*/, this.initializeAuthorizationRequest(request, InteractionType.Popup)];\r\n                    case 1:\r\n                        validRequest = _a.sent();\r\n                        this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        _a.trys.push([2, 8, , 9]);\r\n                        // Create auth code request and generate PKCE params\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\r\n                        return [4 /*yield*/, this.initializeAuthorizationCodeRequest(validRequest)];\r\n                    case 3:\r\n                        authCodeRequest = _a.sent();\r\n                        // Initialize the client\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);\r\n                        return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions)];\r\n                    case 4:\r\n                        authClient = _a.sent();\r\n                        this.logger.verbose(\"Auth code client created\");\r\n                        isNativeBroker = NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme);\r\n                        fetchNativeAccountIdMeasurement = void 0;\r\n                        if (isNativeBroker) {\r\n                            fetchNativeAccountIdMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.FetchAccountIdWithNativeBroker, request.correlationId);\r\n                        }\r\n                        return [4 /*yield*/, authClient.getAuthCodeUrl(__assign(__assign({}, validRequest), { nativeBroker: isNativeBroker }))];\r\n                    case 5:\r\n                        navigateUrl = _a.sent();\r\n                        interactionHandler = new InteractionHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);\r\n                        popupParameters = {\r\n                            popup: popup,\r\n                            popupName: popupName,\r\n                            popupWindowAttributes: popupWindowAttributes\r\n                        };\r\n                        popupWindow = this.initiateAuthRequest(navigateUrl, popupParameters);\r\n                        this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, { popupWindow: popupWindow }, null);\r\n                        return [4 /*yield*/, this.monitorPopupForHash(popupWindow)];\r\n                    case 6:\r\n                        hash = _a.sent();\r\n                        serverParams = UrlString.getDeserializedHash(hash);\r\n                        state_1 = this.validateAndExtractStateFromHash(serverParams, InteractionType.Popup, validRequest.correlationId);\r\n                        // Remove throttle if it exists\r\n                        ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, authCodeRequest);\r\n                        if (serverParams.accountId) {\r\n                            this.logger.verbose(\"Account id found in hash, calling WAM for token\");\r\n                            // end measurement for server call with native brokering enabled\r\n                            if (fetchNativeAccountIdMeasurement) {\r\n                                fetchNativeAccountIdMeasurement.endMeasurement({\r\n                                    success: true,\r\n                                    isNativeBroker: true\r\n                                });\r\n                            }\r\n                            if (!this.nativeMessageHandler) {\r\n                                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\r\n                            }\r\n                            nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, validRequest.correlationId);\r\n                            userRequestState = ProtocolUtils.parseRequestState(this.browserCrypto, state_1).userRequestState;\r\n                            return [2 /*return*/, nativeInteractionClient.acquireToken(__assign(__assign({}, validRequest), { state: userRequestState, prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\r\n                                 })).finally(function () {\r\n                                    _this.browserStorage.cleanRequestByState(state_1);\r\n                                })];\r\n                        }\r\n                        return [4 /*yield*/, interactionHandler.handleCodeResponseFromHash(hash, state_1, authClient.authority, this.networkClient)];\r\n                    case 7:\r\n                        result = _a.sent();\r\n                        return [2 /*return*/, result];\r\n                    case 8:\r\n                        e_1 = _a.sent();\r\n                        if (popup) {\r\n                            // Close the synchronous popup if an error is thrown before the window unload event is registered\r\n                            popup.close();\r\n                        }\r\n                        if (e_1 instanceof AuthError) {\r\n                            e_1.setCorrelationId(this.correlationId);\r\n                        }\r\n                        serverTelemetryManager.cacheFailedRequest(e_1);\r\n                        this.browserStorage.cleanRequestByState(validRequest.state);\r\n                        throw e_1;\r\n                    case 9: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param validRequest\r\n     * @param popupName\r\n     * @param requestAuthority\r\n     * @param popup\r\n     * @param mainWindowRedirectUri\r\n     * @param popupWindowAttributes\r\n     */\r\n    PopupClient.prototype.logoutPopupAsync = function (validRequest, popupName, popupWindowAttributes, requestAuthority, popup, mainWindowRedirectUri) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var serverTelemetryManager, authClient, logoutUri, popupWindow, navigationOptions, absoluteUrl, e_2;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.logger.verbose(\"logoutPopupAsync called\");\r\n                        this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Popup, validRequest);\r\n                        serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logoutPopup);\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 5, , 6]);\r\n                        // Clear cache on logout\r\n                        return [4 /*yield*/, this.clearCacheOnLogout(validRequest.account)];\r\n                    case 2:\r\n                        // Clear cache on logout\r\n                        _a.sent();\r\n                        // Initialize the client\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, validRequest.correlationId);\r\n                        return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, requestAuthority)];\r\n                    case 3:\r\n                        authClient = _a.sent();\r\n                        this.logger.verbose(\"Auth code client created\");\r\n                        logoutUri = authClient.getLogoutUri(validRequest);\r\n                        this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Popup, validRequest);\r\n                        popupWindow = this.openPopup(logoutUri, { popupName: popupName, popupWindowAttributes: popupWindowAttributes, popup: popup });\r\n                        this.eventHandler.emitEvent(EventType.POPUP_OPENED, InteractionType.Popup, { popupWindow: popupWindow }, null);\r\n                        return [4 /*yield*/, this.waitForLogoutPopup(popupWindow)];\r\n                    case 4:\r\n                        _a.sent();\r\n                        if (mainWindowRedirectUri) {\r\n                            navigationOptions = {\r\n                                apiId: ApiId.logoutPopup,\r\n                                timeout: this.config.system.redirectNavigationTimeout,\r\n                                noHistory: false\r\n                            };\r\n                            absoluteUrl = UrlString.getAbsoluteUrl(mainWindowRedirectUri, BrowserUtils.getCurrentUri());\r\n                            this.logger.verbose(\"Redirecting main window to url specified in the request\");\r\n                            this.logger.verbosePii(\"Redirecting main window to: \" + absoluteUrl);\r\n                            this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);\r\n                        }\r\n                        else {\r\n                            this.logger.verbose(\"No main window navigation requested\");\r\n                        }\r\n                        return [3 /*break*/, 6];\r\n                    case 5:\r\n                        e_2 = _a.sent();\r\n                        if (popup) {\r\n                            // Close the synchronous popup if an error is thrown before the window unload event is registered\r\n                            popup.close();\r\n                        }\r\n                        if (e_2 instanceof AuthError) {\r\n                            e_2.setCorrelationId(this.correlationId);\r\n                        }\r\n                        this.browserStorage.setInteractionInProgress(false);\r\n                        this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Popup, null, e_2);\r\n                        this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\r\n                        serverTelemetryManager.cacheFailedRequest(e_2);\r\n                        throw e_2;\r\n                    case 6:\r\n                        this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Popup);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Opens a popup window with given request Url.\r\n     * @param requestUrl\r\n     */\r\n    PopupClient.prototype.initiateAuthRequest = function (requestUrl, params) {\r\n        // Check that request url is not empty.\r\n        if (!StringUtils.isEmpty(requestUrl)) {\r\n            this.logger.infoPii(\"Navigate to: \" + requestUrl);\r\n            // Open the popup window to requestUrl.\r\n            return this.openPopup(requestUrl, params);\r\n        }\r\n        else {\r\n            // Throw error if request URL is empty.\r\n            this.logger.error(\"Navigate url is empty\");\r\n            throw BrowserAuthError.createEmptyNavigationUriError();\r\n        }\r\n    };\r\n    /**\r\n     * Monitors a window until it loads a url with the same origin.\r\n     * @param popupWindow - window that is being monitored\r\n     * @param timeout - timeout for processing hash once popup is redirected back to application\r\n     */\r\n    PopupClient.prototype.monitorPopupForHash = function (popupWindow) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            /*\r\n             * Polling for popups needs to be tick-based,\r\n             * since a non-trivial amount of time can be spent on interaction (which should not count against the timeout).\r\n             */\r\n            var maxTicks = _this.config.system.windowHashTimeout / _this.config.system.pollIntervalMilliseconds;\r\n            var ticks = 0;\r\n            _this.logger.verbose(\"PopupHandler.monitorPopupForHash - polling started\");\r\n            var intervalId = setInterval(function () {\r\n                // Window is closed\r\n                if (popupWindow.closed) {\r\n                    _this.logger.error(\"PopupHandler.monitorPopupForHash - window closed\");\r\n                    _this.cleanPopup();\r\n                    clearInterval(intervalId);\r\n                    reject(BrowserAuthError.createUserCancelledError());\r\n                    return;\r\n                }\r\n                var href = Constants.EMPTY_STRING;\r\n                var hash = Constants.EMPTY_STRING;\r\n                try {\r\n                    /*\r\n                     * Will throw if cross origin,\r\n                     * which should be caught and ignored\r\n                     * since we need the interval to keep running while on STS UI.\r\n                     */\r\n                    href = popupWindow.location.href;\r\n                    hash = popupWindow.location.hash;\r\n                }\r\n                catch (e) { }\r\n                // Don't process blank pages or cross domain\r\n                if (StringUtils.isEmpty(href) || href === \"about:blank\") {\r\n                    return;\r\n                }\r\n                _this.logger.verbose(\"PopupHandler.monitorPopupForHash - popup window is on same origin as caller\");\r\n                /*\r\n                 * Only run clock when we are on same domain for popups\r\n                 * as popup operations can take a long time.\r\n                 */\r\n                ticks++;\r\n                if (hash) {\r\n                    _this.logger.verbose(\"PopupHandler.monitorPopupForHash - found hash in url\");\r\n                    clearInterval(intervalId);\r\n                    _this.cleanPopup(popupWindow);\r\n                    if (UrlString.hashContainsKnownProperties(hash)) {\r\n                        _this.logger.verbose(\"PopupHandler.monitorPopupForHash - hash contains known properties, returning.\");\r\n                        resolve(hash);\r\n                    }\r\n                    else {\r\n                        _this.logger.error(\"PopupHandler.monitorPopupForHash - found hash in url but it does not contain known properties. Check that your router is not changing the hash prematurely.\");\r\n                        _this.logger.errorPii(\"PopupHandler.monitorPopupForHash - hash found: \" + hash);\r\n                        reject(BrowserAuthError.createHashDoesNotContainKnownPropertiesError());\r\n                    }\r\n                }\r\n                else if (ticks > maxTicks) {\r\n                    _this.logger.error(\"PopupHandler.monitorPopupForHash - unable to find hash in url, timing out\");\r\n                    clearInterval(intervalId);\r\n                    reject(BrowserAuthError.createMonitorPopupTimeoutError());\r\n                }\r\n            }, _this.config.system.pollIntervalMilliseconds);\r\n        });\r\n    };\r\n    /**\r\n     * Waits for user interaction in logout popup window\r\n     * @param popupWindow\r\n     * @returns\r\n     */\r\n    PopupClient.prototype.waitForLogoutPopup = function (popupWindow) {\r\n        var _this = this;\r\n        return new Promise(function (resolve) {\r\n            _this.logger.verbose(\"PopupHandler.waitForLogoutPopup - polling started\");\r\n            var intervalId = setInterval(function () {\r\n                // Window is closed\r\n                if (popupWindow.closed) {\r\n                    _this.logger.error(\"PopupHandler.waitForLogoutPopup - window closed\");\r\n                    _this.cleanPopup();\r\n                    clearInterval(intervalId);\r\n                    resolve();\r\n                }\r\n                var href = Constants.EMPTY_STRING;\r\n                try {\r\n                    /*\r\n                     * Will throw if cross origin,\r\n                     * which should be caught and ignored\r\n                     * since we need the interval to keep running while on STS UI.\r\n                     */\r\n                    href = popupWindow.location.href;\r\n                }\r\n                catch (e) { }\r\n                // Don't process blank pages or cross domain\r\n                if (StringUtils.isEmpty(href) || href === \"about:blank\") {\r\n                    return;\r\n                }\r\n                _this.logger.verbose(\"PopupHandler.waitForLogoutPopup - popup window is on same origin as caller, closing.\");\r\n                clearInterval(intervalId);\r\n                _this.cleanPopup(popupWindow);\r\n                resolve();\r\n            }, _this.config.system.pollIntervalMilliseconds);\r\n        });\r\n    };\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Configures popup window for login.\r\n     *\r\n     * @param urlNavigate\r\n     * @param title\r\n     * @param popUpWidth\r\n     * @param popUpHeight\r\n     * @param popupWindowAttributes\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    PopupClient.prototype.openPopup = function (urlNavigate, popupParams) {\r\n        try {\r\n            var popupWindow = void 0;\r\n            // Popup window passed in, setting url to navigate to\r\n            if (popupParams.popup) {\r\n                popupWindow = popupParams.popup;\r\n                this.logger.verbosePii(\"Navigating popup window to: \" + urlNavigate);\r\n                popupWindow.location.assign(urlNavigate);\r\n            }\r\n            else if (typeof popupParams.popup === \"undefined\") {\r\n                // Popup will be undefined if it was not passed in\r\n                this.logger.verbosePii(\"Opening popup window to: \" + urlNavigate);\r\n                popupWindow = this.openSizedPopup(urlNavigate, popupParams.popupName, popupParams.popupWindowAttributes);\r\n            }\r\n            // Popup will be null if popups are blocked\r\n            if (!popupWindow) {\r\n                throw BrowserAuthError.createEmptyWindowCreatedError();\r\n            }\r\n            if (popupWindow.focus) {\r\n                popupWindow.focus();\r\n            }\r\n            this.currentWindow = popupWindow;\r\n            window.addEventListener(\"beforeunload\", this.unloadWindow);\r\n            return popupWindow;\r\n        }\r\n        catch (e) {\r\n            this.logger.error(\"error opening popup \" + e.message);\r\n            this.browserStorage.setInteractionInProgress(false);\r\n            throw BrowserAuthError.createPopupWindowError(e.toString());\r\n        }\r\n    };\r\n    /**\r\n     * Helper function to set popup window dimensions and position\r\n     * @param urlNavigate\r\n     * @param popupName\r\n     * @param popupWindowAttributes\r\n     * @returns\r\n     */\r\n    PopupClient.prototype.openSizedPopup = function (urlNavigate, popupName, popupWindowAttributes) {\r\n        var _a, _b, _c, _d;\r\n        /**\r\n         * adding winLeft and winTop to account for dual monitor\r\n         * using screenLeft and screenTop for IE8 and earlier\r\n         */\r\n        var winLeft = window.screenLeft ? window.screenLeft : window.screenX;\r\n        var winTop = window.screenTop ? window.screenTop : window.screenY;\r\n        /**\r\n         * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n         * using document.documentElement.clientWidth for IE8 and earlier\r\n         */\r\n        var winWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\r\n        var winHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\r\n        var width = (_a = popupWindowAttributes.popupSize) === null || _a === void 0 ? void 0 : _a.width;\r\n        var height = (_b = popupWindowAttributes.popupSize) === null || _b === void 0 ? void 0 : _b.height;\r\n        var top = (_c = popupWindowAttributes.popupPosition) === null || _c === void 0 ? void 0 : _c.top;\r\n        var left = (_d = popupWindowAttributes.popupPosition) === null || _d === void 0 ? void 0 : _d.left;\r\n        if (!width || width < 0 || width > winWidth) {\r\n            this.logger.verbose(\"Default popup window width used. Window width not configured or invalid.\");\r\n            width = BrowserConstants.POPUP_WIDTH;\r\n        }\r\n        if (!height || height < 0 || height > winHeight) {\r\n            this.logger.verbose(\"Default popup window height used. Window height not configured or invalid.\");\r\n            height = BrowserConstants.POPUP_HEIGHT;\r\n        }\r\n        if (!top || top < 0 || top > winHeight) {\r\n            this.logger.verbose(\"Default popup window top position used. Window top not configured or invalid.\");\r\n            top = Math.max(0, ((winHeight / 2) - (BrowserConstants.POPUP_HEIGHT / 2)) + winTop);\r\n        }\r\n        if (!left || left < 0 || left > winWidth) {\r\n            this.logger.verbose(\"Default popup window left position used. Window left not configured or invalid.\");\r\n            left = Math.max(0, ((winWidth / 2) - (BrowserConstants.POPUP_WIDTH / 2)) + winLeft);\r\n        }\r\n        return window.open(urlNavigate, popupName, \"width=\" + width + \", height=\" + height + \", top=\" + top + \", left=\" + left + \", scrollbars=yes\");\r\n    };\r\n    /**\r\n     * Event callback to unload main window.\r\n     */\r\n    PopupClient.prototype.unloadWindow = function (e) {\r\n        this.browserStorage.cleanRequestByInteractionType(InteractionType.Popup);\r\n        if (this.currentWindow) {\r\n            this.currentWindow.close();\r\n        }\r\n        // Guarantees browser unload will happen, so no other errors will be thrown.\r\n        e.preventDefault();\r\n    };\r\n    /**\r\n     * Closes popup, removes any state vars created during popup calls.\r\n     * @param popupWindow\r\n     */\r\n    PopupClient.prototype.cleanPopup = function (popupWindow) {\r\n        if (popupWindow) {\r\n            // Close window.\r\n            popupWindow.close();\r\n        }\r\n        // Remove window unload function\r\n        window.removeEventListener(\"beforeunload\", this.unloadWindow);\r\n        // Interaction is completed - remove interaction status.\r\n        this.browserStorage.setInteractionInProgress(false);\r\n    };\r\n    /**\r\n     * Generates the name for the popup based on the client id and request\r\n     * @param clientId\r\n     * @param request\r\n     */\r\n    PopupClient.prototype.generatePopupName = function (scopes, authority) {\r\n        return BrowserConstants.POPUP_NAME_PREFIX + \".\" + this.config.auth.clientId + \".\" + scopes.join(\"-\") + \".\" + authority + \".\" + this.correlationId;\r\n    };\r\n    /**\r\n     * Generates the name for the popup based on the client id and request for logouts\r\n     * @param clientId\r\n     * @param request\r\n     */\r\n    PopupClient.prototype.generateLogoutPopupName = function (request) {\r\n        var homeAccountId = request.account && request.account.homeAccountId;\r\n        return BrowserConstants.POPUP_NAME_PREFIX + \".\" + this.config.auth.clientId + \".\" + homeAccountId + \".\" + this.correlationId;\r\n    };\r\n    return PopupClient;\r\n}(StandardInteractionClient));\n\nexport { PopupClient };\n"]},"metadata":{},"sourceType":"module"}